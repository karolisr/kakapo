# -*- coding: utf-8 -*-

from __future__ import print_function

import unittest

from kakapo import entrez
from kakapo.bioio import _parse_gbseq_xml_text
from kakapo.bioio import _parse_esummary_xml_text
from time import sleep
from xmltodict import parse as parse_xml


ESEARCH_TEST_NUCCORE_UID_SET = set([
    '563401029', '452113378', '110555428',
    '196051994', '193075890', '193075880', '27463521', '349501455',
    '531033302', '193075802', '531033298', '47057167', '312370090',
    '237783859', '193075772', '159161091', '196052155', '24473880',
    '24473892', '24473898', '27463417', '237783807', '27463517',
    '193075866', '27463419', '383867015', '7025397', '312369802',
    '32264704', '24473876', '196052000', '571332144', '452113394',
    '193075830', '193075868', '563401007', '110555412', '193075796',
    '349501451', '312370046', '110555408', '1572921', '312370078',
    '383867051', '7025421', '27463387', '32264710', '47057223',
    '571332146', '193075860', '196052098', '383867023', '110555358',
    '47057165', '237783809', '27463437', '196052078', '383867037',
    '47057169', '476185', '193075818', '476199', '383867031', '110555416',
    '196052014', '558698565', '47057211', '27463493', '196052059',
    '196052139', '383867097', '193075884', '383867105', '27463489',
    '24473947', '383867035', '27463447', '312370072', '24473894',
    '193075834', '159161077', '110555368', '24473900', '196052045',
    '47057237', '47057267', '237783851', '452113420', '27463477',
    '47057197', '237783793', '27463385', '237783797', '47057247',
    '193075770', '383867029', '531033306', '563401019', '196052072',
    '27463401', '196052134', '196052143', '32264712', '24473870',
    '193075840', '531033286', '47057249', '27463467', '27463421',
    '196052031', '196052141', '312370088', '196051972', '27463495',
    '383867077', '47057257', '531033292', '193075804', '15545984',
    '32264698', '476193', '193075900', '196051988', '196052016',
    '27463451', '47057189', '31580955', '24473878', '27463519',
    '196052151', '383867065', '1644489', '1644485', '27463465', '1572915',
    '47057227', '563401027', '24473941', '193075896', '397770056',
    '196052114', '383867099', '563401021', '558698567', '193075778',
    '312370074', '193075780', '27463511', '159161099', '27463501',
    '193075894', '1572917', '27463393', '196052100', '110555410',
    '312370098', '452113418', '563401033', '7025407', '193075794',
    '193075812', '159161105', '531033278', '49168678', '1763286',
    '571332148', '27463427', '1572941', '196052130', '196052106',
    '24473902', '383867091', '110555422', '476197', '383867025',
    '159161095', '24473886', '193075814', '159161097', '196052002',
    '558698563', '27463503', '383867043', '27463377', '193075850',
    '110555458', '563401025', '476203', '452113404', '196052041',
    '110555384', '159161075', '47057245', '15545982', '27463405',
    '110555350', '452113374', '383867067', '476179', '193075898',
    '558698581', '196052095', '196052070', '27463507', '383867075',
    '397770052', '196052080', '27463523', '383867053', '196052102',
    '397770062', '159161071', '237783819', '196052076', '383867013',
    '193075776', '193075816', '159161083', '237783817', '47057269',
    '110555432', '47057221', '47057261', '47057193', '196052023',
    '193075808', '110555356', '27463459', '110555378', '558698583',
    '452113370', '193075836', '571332138', '27463443', '32264700',
    '196052033', '27463505', '193075886', '110555418', '27463471',
    '47057173', '558698579', '237783825', '110555446', '452113390',
    '196052083', '24473949', '193075856', '196052112', '7025399',
    '397770054', '47057199', '531033280', '531033300', '196052136',
    '27463375', '27463515', '27463453', '237783831', '27463413',
    '383867081', '47057187', '24473890', '196052137', '196052051',
    '571332136', '47057235', '531033290', '452113392', '383867107',
    '193075888', '193090139', '110555374', '24473888', '312370058',
    '312370062', '24473872', '196052085', '110555452', '196052122',
    '383867059', '476183', '196052055', '383867019', '110555404',
    '27463445', '452113400', '47057243', '193075790', '312370044',
    '237783839', '193075882', '196052110', '312370054', '312370082',
    '24473939', '196052108', '452113424', '237783849', '563401011',
    '193075820', '237783827', '47057201', '110555406', '110555450',
    '383867021', '27463403', '193075848', '397770050', '27463449',
    '110555364', '7025405', '196052147', '383867049', '383867101',
    '110555392', '531033304', '1644483', '27463381', '452113398',
    '47057231', '47057191', '312370084', '196052037', '196052006',
    '531033282', '196052157', '196051974', '196052017', '27463513',
    '452113376', '27463431', '349501449', '27463461', '1572933',
    '237783795', '193075792', '196052027', '110555426', '159161087',
    '24473874', '312370066', '558698577', '159161089', '452113410',
    '452113364', '110555380', '27463395', '159161107', '196052053',
    '27463439', '397770042', '47057203', '110555376', '27463391',
    '110555430', '237783857', '159161093', '47057183', '24473896',
    '383867041', '156712544', '397770048', '110555414', '110555372',
    '193075844', '452113384', '110555370', '452113414', '27463441',
    '476187', '312370080', '47057159', '237783811', '110555394',
    '193075858', '531033288', '196052153', '47057239', '312370064',
    '196052064', '196052025', '159161081', '476177', '47057155',
    '27463475', '312370076', '349501457', '383867093', '27463373',
    '27463497', '312369800', '31580912', '237783841', '1644487',
    '383867103', '47057185', '27463435', '7025413', '159161101',
    '193075852', '237783843', '110555386', '193075806', '27463409',
    '47057213', '452113368', '383867047', '47057205', '563401031',
    '383867017', '312370096', '47057163', '237783853', '193075798',
    '196052091', '159161085', '383867009', '193075828', '237783863',
    '47057253', '452113408', '563401003', '110555402', '27463429',
    '264160421', '27463379', '110555400', '558698571', '110555438',
    '1572939', '27463415', '196052161', '32264718', '110555398',
    '110555456', '312370104', '452113372', '1644497', '196052116',
    '531033294', '7025401', '563401023', '110555396', '237783833',
    '32264706', '47057241', '237783835', '32264708', '110555366',
    '196052097', '349501453', '27463383', '196052128', '47057251',
    '196052089', '563401005', '193075782', '1572925', '196052118',
    '397770044', '193075846', '110555420', '196051984', '110555382',
    '237783805', '563401015', '196052021', '193075872', '558698575',
    '531033284', '452113380', '193075766', '27463473', '1572929',
    '27463457', '312370050', '476189', '452113382', '27463469',
    '563401009', '27463433', '47057215', '237783837', '27463455',
    '312370102', '196052132', '476191', '476173', '196051976', '1644491',
    '563401013', '383867083', '196052004', '196052159', '383867011',
    '1572919', '383867033', '196052124', '193075786', '7025403',
    '1644495', '32264714', '383867079', '383867085', '47057157',
    '110555454', '312370056', '196052035', '196052057', '49168680',
    '558698585', '27463389', '32264694', '1572923', '571332142',
    '27463423', '159161073', '27463407', '312370068', '27463425',
    '383867073', '47057151', '47057233', '196052104', '193075854',
    '24473884', '193075862', '47057153', '531033296', '295333',
    '193075842', '531033308', '7025419', '193075822', '47057195',
    '196052163', '196052082', '476175', '47057265', '47057161',
    '24473943', '196051990', '452113412', '1644493', '312370042',
    '383867039', '193075784', '383867109', '47057219', '196052062',
    '47057179', '1572935', '27463411', '452113396', '110555448',
    '312370060', '193075870', '110555360', '193075832', '196051992',
    '196052093', '383867089', '193075874', '27463485', '47057217',
    '110555424', '47057171', '476201', '196052029', '196052049',
    '196052066', '196051982', '237783855', '193075810', '27463479',
    '397770060', '193075838', '110555444', '312370100', '47057177',
    '383867071', '27463399', '312370052', '383867095', '7025417',
    '196052087', '27463483', '1572931', '24473945', '27463397',
    '397770038', '7025415', '452113366', '47057181', '196052126',
    '383867063', '196052043', '383867069', '110555388', '110555362',
    '1572937', '193075774', '563401017', '397770058', '47057259',
    '237783799', '110555436', '24473904', '7025423', '196052019',
    '312370094', '383867061', '47057209', '476195', '476205', '47057255',
    '452113422', '563401001', '110555352', '7025395', '196052149',
    '196051980', '237783821', '237783803', '196051978', '1572943',
    '193075800', '237783829', '27463499', '196052145', '196052074',
    '196052120', '193075824', '237783861', '32264696', '383867027',
    '515020483', '196052039', '237783815', '237783845', '110555460',
    '193075876', '193075892', '193075768', '237783801', '397770046',
    '193075878', '237783791', '312370092', '237783847', '452113416',
    '27463463', '110555442', '383867087', '47057225', '110555390',
    '196051986', '27463487', '196051998', '312370048', '452113386',
    '571332134', '27463509', '110555354', '196051996', '27463491',
    '558698573', '196052010', '196052060', '196052068', '237783823',
    '1572927', '193075788', '452113388', '383867057', '383867045',
    '24473882', '32264716', '110555440', '312370086', '196052047',
    '558698569', '196052008', '383867055', '193075864', '452113402',
    '196052012', '312370070', '7025411', '571332140', '452113406',
    '159161079', '237783813', '159161103', '18031883', '27463481',
    '397770040', '89112775', '383867005', '312370038', '383867007',
    '110555434', '193075826', '32264702', '515020485', '312370040',
    '7025409', '24473868', '47057229', '47057263'])

ESEARCH_TEST_TAXONOMY_UID_SET = set(['24663', '4083', '4107'])


def setUpModule():
    print('\nsetUpModule kakapoEntrezTests')


def tearDownModule():
    print('\n\ntearDownModule kakapoEntrezTests')


class kakapoEntrezTests(unittest.TestCase):

    print('kakapoEntrezTests')

    def test_esearch(self):

        print('\ntest_esearch')

        # Search 'nuccore' database ===========================================
        db_to_search = 'nuccore'
        return_value = entrez.esearch(
            db=db_to_search,
            term='ndhF[Title] AND txid4070[Organism]')

        # esearch should return a dictionary with 5 keys
        self.assertEqual(len(return_value.keys()), 5)

        # esearch should return the name of the database given
        db = return_value['Database']
        self.assertEqual(db_to_search, db)

        # the number of uids returned should be more or equal to 711
        # this is the number being returned on 2015-01-02
        count = return_value['Count']
        self.assertTrue(count >= 711)

        # we should expect to get the same gis back as of 2015-01-02 (or more)
        id_list = return_value['IdList']
        self.assertTrue(ESEARCH_TEST_NUCCORE_UID_SET.issubset(set(id_list)))
        # count should return the number of items in id_list
        self.assertEqual(count, len(id_list))

        # query_key should be '1'???
        query_key = return_value['QueryKey']
        self.assertEqual(query_key, '1')

        # web_env should start with 'NCID_'
        web_env = return_value['WebEnv']
        self.assertTrue(web_env.startswith('NCID_'))

        sleep(1)

        # Search 'taxonomy' database ==========================================
        db_to_search = 'taxonomy'
        return_value = entrez.esearch(
            db=db_to_search,
            term='Solanum chilense OR Solanum OR Physalis')

        # esearch should return a dictionary with 5 keys
        self.assertEqual(len(return_value.keys()), 5)

        # esearch should return the name of the database given
        db = return_value['Database']
        self.assertEqual(db_to_search, db)

        # the number of uids returned should be more or equal to 3
        # this is the number being returned on 2015-01-02
        count = return_value['Count']
        self.assertTrue(count >= 3)

        # we should expect to get the same gis back as on 2015-01-02
        id_list = return_value['IdList']
        self.assertTrue(ESEARCH_TEST_TAXONOMY_UID_SET.issubset(set(id_list)))
        # count should return the number of items in id_list
        self.assertEqual(count, len(id_list))

        # query_key should be '1'???
        query_key = return_value['QueryKey']
        self.assertEqual(query_key, '1')

        # web_env should start with 'NCID_'
        web_env = return_value['WebEnv']
        self.assertTrue(web_env.startswith('NCID_'))

        sleep(1)

    def test_epost(self):

        print('\ntest_epost')

        db_to_search = 'nuccore'
        return_value = entrez.epost(
            db=db_to_search,
            id_list=['156629009', '156629011', '156629013'])

        # epost should return a dictionary with 4 keys
        self.assertEqual(len(return_value.keys()), 4)

        # epost should return the name of the database given
        db = return_value['Database']
        self.assertEqual(db_to_search, db)

        # the number of uids returned should be equal to 3
        count = return_value['Count']
        self.assertTrue(count == 3)

        # query_key should be '1'???
        query_key = return_value['QueryKey']
        self.assertEqual(query_key, '1')

        # web_env should start with 'NCID_'
        web_env = return_value['WebEnv']
        self.assertTrue(web_env.startswith('NCID_'))

        sleep(1)

    def test_efetch(self):

        print('\ntest_efetch')

        # Download nucleotide sequence records ================================
        db_to_search = 'nuccore'
        epost_results = entrez.epost(
            db=db_to_search,
            id_list=['156629009', '156629011', '156629013', '226774382'])

        ret_type = 'gb'

        efetch_results = entrez.efetch(
            data=epost_results,
            parser=_parse_gbseq_xml_text,
            ret_type=ret_type)

        records = efetch_results

        # there should be 4 records returned
        self.assertEqual(len(records), 4)

        sleep(1)

        # Download protein sequence records ===================================
        db_to_search = 'protein'
        epost_results = entrez.epost(
            db=db_to_search,
            id_list=['2578426', '357495397'])

        ret_type = 'gp'

        efetch_results = entrez.efetch(
            data=epost_results,
            parser=_parse_gbseq_xml_text,
            ret_type=ret_type)

        records = efetch_results

        # there should be 2 records returned
        self.assertEqual(len(records), 2)

        sleep(1)

        # Download taxonomy records ===========================================
        db_to_search = 'taxonomy'
        epost_results = entrez.epost(
            db=db_to_search,
            id_list=['24663', '3702'])

        def parser(z):
            return parse_xml(z)['TaxaSet']['Taxon']

        ret_type = 'null'

        efetch_results = entrez.efetch(
            data=epost_results,
            parser=parser,
            ret_type=ret_type)

        # there should be 2 records returned
        self.assertEqual(len(records), 2)

        sleep(1)

    def test_esummary(self):

        print('\ntest_esummary')

        # Download nucleotide sequence records ================================
        db_to_search = 'nuccore'
        epost_results = entrez.epost(
            db=db_to_search,
            id_list=['156629009', '156629011', '156629013', '226774382'])

        esummary_results = entrez.esummary(
            data=epost_results,
            parser=_parse_esummary_xml_text)

        records = esummary_results

        # there should be 4 records returned
        self.assertEqual(len(records), 4)

        sleep(1)
